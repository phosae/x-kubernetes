/*
boilerplate text in generated file header
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	v2 "github.com/phosae/x-kubernetes/api/hello.zeng.dev/v2"
)

// FooStatusApplyConfiguration represents an declarative configuration of the FooStatus type for use
// with apply.
type FooStatusApplyConfiguration struct {
	Phase      *v2.FooPhase                     `json:"phase,omitempty"`
	Conditions []FooConditionApplyConfiguration `json:"conditions,omitempty"`
}

// FooStatusApplyConfiguration constructs an declarative configuration of the FooStatus type for use with
// apply.
func FooStatus() *FooStatusApplyConfiguration {
	return &FooStatusApplyConfiguration{}
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *FooStatusApplyConfiguration) WithPhase(value v2.FooPhase) *FooStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *FooStatusApplyConfiguration) WithConditions(values ...*FooConditionApplyConfiguration) *FooStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
